type AdminChanged @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeraFeeChanged @entity(immutable: true) {
  id: Bytes!
  beraFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PassesAddressChanged @entity(immutable: true) {
  id: Bytes!
  passes: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultFundraisingPeriodChanged @entity(immutable: true) {
  id: Bytes!
  defaultFundraisingPeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultLockingPeriodChanged @entity(immutable: true) {
  id: Bytes!
  defaultLockingPeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ManagerExitFeeChanged @entity(immutable: true) {
  id: Bytes!
  numerator: BigInt! # uint256
  denominator: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxCapacityPerPotChanged @entity(immutable: true) {
  id: Bytes!
  capacity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxPerformanceFeeChanged @entity(immutable: true) {
  id: Bytes!
  maxManagerFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaximumSupportedAssetCountChanged @entity(immutable: true) {
  id: Bytes!
  count: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinInvestmentAmountChanged @entity(immutable: true) {
  id: Bytes!
  maxAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FlexiblePotCreated @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  usdToken: Bytes! # address
  fundraisingDeadline: BigInt! # uint256
  lockingDeadline: BigInt! # uint256
  maxCapacity: BigInt! # uint256
  manager: Bytes! # address
  performanceFeeNumerator: BigInt! # uint256
  performanceFeeDenominator: BigInt! # uint256
  potId: BigInt! # uint256
  version: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NonFlexiblePotCreated @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  usdToken: Bytes! # address
  fundraisingDeadline: BigInt! # uint256
  maxCapacity: BigInt! # uint256
  manager: Bytes! # address
  performanceFeeNumerator: BigInt! # uint256
  performanceFeeDenominator: BigInt! # uint256
  potId: BigInt! # uint256
  version: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PotImplementationChanged @entity(immutable: true) {
  id: Bytes!
  potType: Int! # uint8
  implementation: Bytes! # address
  version: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolExitFeeChanged @entity(immutable: true) {
  id: Bytes!
  numerator: BigInt! # uint256
  denominator: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAdded @entity(immutable: true) {
  id: Bytes!
  asset: Bytes! # address
  tokenType: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenRemoved @entity(immutable: true) {
  id: Bytes!
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryChanged @entity(immutable: true) {
  id: Bytes!
  treasury: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UsdTokenChanged @entity(immutable: true) {
  id: Bytes!
  usd: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AssetAdded @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AssetRemoved @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Claimed @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  investor: Bytes! # address
  shareAmount: BigInt! # uint256
  usdToken: Bytes! # address
  usdAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposited @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  investor: Bytes! # address
  usdToken: Bytes! # address
  usdAmount: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Canceled @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  totalSupply: BigInt! # uint256
  totalRaisedInUsd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Closed @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Executed @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  sender: Bytes! # address
  transactionType: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FundraisingClosed @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  totalSupply: BigInt! # uint256
  totalRaisedInUsd: BigInt! # uint256
  fundraisingDeadline: BigInt! # uint256
  lockingDeadline: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PotInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  sharePrice: BigInt! # uint256
  investor: Bytes! # address
  shareAmount: BigInt! # uint256,
  protocolExitFee: BigInt! # uint256
  managerExitFee: BigInt! # uint256
  performanceFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawnAsset @entity(immutable: true) {
  id: ID!
  withdrawn: Bytes!
  asset: Bytes! # address
  amountOut: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlatformFeeCollected @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  asset: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddLiquidity @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeFrom @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  sourceAsset: Bytes! # address
  sourceAmount: BigInt! # uint256
  dstAsset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeTo @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  sourceAsset: Bytes! # address
  dstAsset: Bytes! # address
  dstAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ERC20Approval @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  token: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WrapNativeToken @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnwrapNativeToken @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnwrapWBERA @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amountMinimum: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutedLog @entity(immutable: true) {
  id: ID!
  address: Bytes! # address
  topics: [Bytes!]
  data: Bytes!
  logIndex: BigInt
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AssetGuardSet @entity(immutable: true) {
  id: Bytes!
  assetType: Int! # uint16
  guardAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractGuardSet @entity(immutable: true) {
  id: Bytes!
  externalContract: Bytes! # address
  guardAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PotUpgraded @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  version: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpOpenTrade @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  pairIndex: BigInt! # uint256
  index: BigInt! # uint256
  orderType: Int! # uint8
  buy: Boolean! # bool
  leverage: BigInt! # uint256
  initialPosToken: BigInt! # uint256
  positionSizeHoney: BigInt! # uint256
  openPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpCloseTradeMarket @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpCancelOpenLimitOrder @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpUpdateOpenLimitOrder @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  newPrice: BigInt! # uint256
  takeProfit: BigInt! # uint256
  stopLoss: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpExecuteLimitOrder @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpUpdateTakeProfit @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  takeProfit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BerpUpdateStopLoss @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  index: BigInt! # uint256
  stopLoss: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeBorrow @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeEarnDeposit @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeEarnWithdraw @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeExercise @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeGetReward @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeRedeem @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeradromeRepay @entity(immutable: true) {
  id: Bytes!
  pot: Bytes! # address
  dex: Bytes! # address
  loanId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}